#!/bin/bash

# ------------------------------------------------------------------------------
# settings                                                              settings
# ------------------------------------------------------------------------------
set -o errtrace  # any trap on ERR is inherited by shell functions,
                 #   command substitutions, and commands executed in a subshell
                 #   environment
set -o nounset   # treat unset variables and parameters other than the special
                 #   parameters "@" and "*" as an error when performing
                 #   parameter expansion
set -o pipefail  # the return value of a pipeline is the value of the last
                 #   (rightmost) command to exit with a non-zero status, or
                 #   zero if all commands in the pipeline exit successfully

# set language
export LANG="en_US.UTF-8"

# use dot as decimal separator
export LC_NUMERIC="en_US.UTF-8"

# terminal colors
readonly    NONE=$(tput sgr0)
readonly     RED=$(tput setaf 1)
readonly   GREEN=$(tput setaf 2)
readonly  YELLOW=$(tput setaf 3)
readonly    BLUE=$(tput setaf 4)
readonly MAGENTA=$(tput setaf 5)
readonly    CYAN=$(tput setaf 6)
readonly   WHITE=$(tput setaf 7)

# bookmark files
readonly GLOBAL_INDEXFILE="$HOME/.bookmarks/index.html"
readonly GLOBAL_STYLEFILE="$HOME/.bookmarks/style.css"

# ------------------------------------------------------------------------------
# functions                                                            functions
# ------------------------------------------------------------------------------

# -------
# failmsg
# -------
#
# This function prints a red colored message via stderr.
#
function failmsg()
{
  # push to stderr
  echo -e "${RED}[FAIL]${NONE} $1" 1>&2
}

# -------
# warnmsg
# -------
#
# This function prints a yellow colored message via stderr.
#
function warnmsg()
{
  # push to stderr
  echo -e "${YELLOW}[WARN]${NONE} $1" 1>&2
}

# -------
# infomsg
# -------
#
# This function prints a blue colored message via stderr.
#
function infomsg()
{
  # push to stderr
  echo -e "${BLUE}[INFO]${NONE} $1" 1>&2
}

# -------
# donemsg
# -------
#
# This function prints a green colored message via stderr.
#
function donemsg()
{
  # push to stderr
  echo -e "${GREEN}[DONE]${NONE} $1" 1>&2
}

# ------------------------------------------------------------------------------
# commands                                                              commands
# ------------------------------------------------------------------------------

# init files
if ! ./0.init ; then

  # signalize trouble
  exit 1

fi

# create temporary file
TEMPFILE=$(mktemp)

# remove temporary file on exit
trap 'rm -f "$TEMPFILE"' EXIT

# create backup
cp --force "$GLOBAL_INDEXFILE" "$GLOBAL_INDEXFILE.bak"

# redirect entire group
{

  # print beginning
  sed -nre "1,/INSERT:HERE:DO:NOT:REMOVE:THIS:LINE/ { p }" "$GLOBAL_INDEXFILE"

  # sort bookmarks by class and title
  sed --quiet           \
      --regexp-extended \
      -- expression="

        # set scope
        /INSERT:HERE:DO:NOT:REMOVE:THIS:LINE/,/STOP:SORTING:HERE:DO:NOT:REMOVE:THIS:LINE/ {

          # create sortable line
          s/(<span.+class=\")([^\"]+)(\".+target=\"_blank\">)([^<]+)(<\/a>.+)/\2\4\x1F\1\2\3\4\5/p

        }
      "                             \
      "$GLOBAL_INDEXFILE"           \
  | env LC_ALL=C sort --ignore-case \
  | sed -re "s/.+\x1F//"

  # print end
  sed -nre "/STOP:SORTING:HERE:DO:NOT:REMOVE:THIS:LINE/,$ { p }" "$GLOBAL_INDEXFILE"

} > "$TEMPFILE"

# replace index file
cp --force "$TEMPFILE" "$GLOBAL_INDEXFILE"

# signalize success
exit 0

